<?php

namespace App\MoonShine\Resources;

use Illuminate\Database\Eloquent\Model;

use Illuminate\Validation\Rule;
use Leeto\MoonShine\Decorations\Block;
use Leeto\MoonShine\Fields\BelongsTo;
use Leeto\MoonShine\Fields\Date;
use Leeto\MoonShine\Fields\Text;
use Leeto\MoonShine\Fields\Textarea;
use Leeto\MoonShine\Filters\BelongsToFilter;
use Leeto\MoonShine\Resources\Resource;
use Leeto\MoonShine\Fields\ID;
use Leeto\MoonShine\Actions\FiltersAction;
use VI\LaravelSiteSettings\Models\Setting;

class SettingResource extends Resource
{
    public static string $model = Setting::class;

    public static string $title = 'Settings';

    public string $titleField = 'slug';

    public function tdStyles(Model $item, int $index, int $cell): string
    {
        if (in_array($cell, [4, 5])) {
            return 'white-space: normal;';
        }

        return '';
    }

    public function fields(): array
    {
        return [
            Block::make('Main', [
                ID::make()->sortable(),
                BelongsTo::make(
                    'Group',
                    'settingGroup',
                    new SettingGroupResource()
                )->nullable()->sortable(),
                Text::make('Slug', 'slug')->required()->sortable()->hint('a-z, 0-9, -, _'),
                Text::make('Hint', 'hint')->nullable()->sortable()->hint('Не используется на сайте, только для удобства администрирования!'),
                Textarea::make('Value', 'value')->nullable()->sortable(),
                Date::make('Updated at', 'updated_at')->sortable()->hideOnForm(),
            ]),
        ];
    }

    public function rules(Model $item): array
    {
        return [
            'setting_group_id' => 'nullable|exists:setting_groups,id',
            'slug'             => [
                'required',
                'max:190',
                'regex:/^([a-z0-9\-\_]+)$/i',
                'unique:setting_groups,slug',
                Rule::unique('settings', 'slug')->where(function ($query) use ($item) {
                    return $query->where('id', '!=', $item->getKey())
                        ->where('setting_group_id', $item->setting_group_id);
                }),
            ],
            'hint'             => 'nullable|max:190',
            'value'            => 'nullable|string',
        ];
    }

    public function search(): array
    {
        return ['id', 'slug', 'hint', 'value'];
    }

    public function filters(): array
    {
        return [
            BelongsToFilter::make(
                'Group',
                'settingGroup'
            ),
        ];
    }

    public function actions(): array
    {
        return [
            FiltersAction::make(trans('moonshine::ui.filters')),
        ];
    }
}
